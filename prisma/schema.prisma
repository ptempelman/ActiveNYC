generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String   @db.VarChar(255)
    authorId  String

    @@index([authorId])
}

model User {
    id                       String     @id @default(cuid())
    email                    String     @unique
    age                      Int?
    dateCreated              DateTime   @default(now())
    role                     String     @default("user")
    nextInteractionThreshold Int        @default(10)
    adminOf                  Activity[] @relation("ActivityAdmins")
    ratings                  Rating[]
    savedActivities          Activity[] @relation("SavedActivities")
    likes                    Like[]
}

model Activity {
    id            String     @id @default(cuid())
    name          String
    address       String
    description   String     @db.Text
    latitude      Float
    longitude     Float
    websiteUrl    String?
    published     Boolean    @default(false)
    averageRating Float?
    ratings       Rating[]
    categories    Category[] @relation
    admins        User[]     @relation("ActivityAdmins")
    savedByUsers  User[]     @relation("SavedActivities")
    likes         Like[]
}

model Rating {
    id         String    @id @default(cuid())
    rating     Float
    activityId String
    userId     String
    activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId], name: "userId_activityId")
    @@index([activityId])
    @@index([userId])
}

model Like {
    id         String    @id @default(cuid())
    userId     String
    activityId String
    liked      Boolean // False for dislike
    user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId], name: "userActivity_unique")
    @@index([userId])
    @@index([activityId])
}

model Category {
    id         String     @id @default(cuid())
    name       String     @unique
    activities Activity[] @relation
}

model ActivityAdmins {
    A String
    B String

    @@unique([A, B], map: "_ActivityAdmins_AB_unique")
    @@index([B], map: "_ActivityAdmins_B_index")
    @@map("_ActivityAdmins")
}

model ActivityToCategory {
    A String
    B String

    @@unique([A, B], map: "_ActivityToCategory_AB_unique")
    @@index([B], map: "_ActivityToCategory_B_index")
    @@map("_ActivityToCategory")
}

model SavedActivities {
    A String
    B String

    @@unique([A, B], map: "_SavedActivities_AB_unique")
    @@index([B], map: "_SavedActivities_B_index")
    @@map("_SavedActivities")
}
